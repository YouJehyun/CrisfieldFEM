      SUBROUTINE ITER(PT,AN,BETOK,QEX,IBC,IWRIT,IWR,AKTS,D,ITERTY,NV,
     1                GM,FI,REAC)
C
C     INPUTS
C     PT(NV) = PREDICTOR DISPLACEMENTS
C     QEX(NV) = EXTERNAL FORCE VECTOR
C     BETOK = CONVOLUTION TOLERANCE
C     IBC = BOUNDARY CON COUNTER
C
C     ITERATES TO EQUILIBRIUM, OUTPUTS ARE NEW 'PT' AND FORCE IN BAR 'AN'
C
C     IF ITERTY(INPUT) = 1, USES FULL N-R
C     IF ITERTY(INPUT) = 2, USES MOD N-R
C     IN LATTER CASE, AKTS AND D INPUT AS CROUT FACTORS (D=PIVOTS)
C     LOCAL ARRAY IS AKTE = ELASTIC STIFFNESS MATRIX
C     ARGUMENTS IN COMMON/DAT2/AND ARRAY X NOT USED FOR SHALLOW TRUSS
C
      DOUBLE PRECISION PT(NV),QEX(NV),REAC(NV),FI(NV),GM(NV),
     1                 AKTS(NV,NV),D(NV),AKTE(4,4),X(2),Z(2),E,ARA,AL,
     2                 AK14S(4),AK15,ARN,POISS,ALN,SMALL,FNORM,GNORM,
     3                 RNORM
      INTEGER IBC(NV),ID14S(4),NDSP,ITYEL,NITMAX,IMOD
C     COMMON /DAT/ X,Z,E,ARA,AL,ID14S,AK14S,NDSP,ANIT,AK15
C     COMMON /DAT2/ ARN,POISS,ALN,ITYEL
C
      SMALL = 0.1D-2
      NITMAX = 16
      IMOD = 1
      IF (ITERTY.EQ.1) IMOD = 3
C
      DO 100 ITE=1,NITMAX
C
        IF (IWRIT.EQ.1) WRITE (IWR,1005) ITE
 1005   FORMAT(/,1X,'ITERATIVE LOOP WITH ITE = ',I5,/)
C     BELOW CALCS FORCE IN BAR(AN)
        CALL FORCE(AN,ANIT,E,ARA,AL,X,Z,PT,IWRIT,IWR,
     1            ITYEL,ARN,ALN,POISS)
C     ABOVE ARGUMENTS NOT USED FOR SHALLOW-TRUSS
C
C     ABOVE CALCULATES FORCE IN BAR, AN
C     BELOW CALCULATES TAN. STIFF. MAT. AKT
C     (IF NR)AND INITIAL FORCE VECTOR FI
        CALL ELEMENT(FI,AKTE,AN,X,Z,PT,E,ARA,AL,IWRIT,IWR,IMOD,
     1              ITYEL,ALN,ARN)
C     ABOVE ARGUMENTS NOT USED FOR SHALLOW TRUSS
C
C     BELOW PUTS EL.STIFF.MAT. AKTE IN STR.STIFF.MAT. AKTS AND
C     ADDS IN EFFECTS OF VARIOUS LINEAR SPRINGS (IF NR)
C     ALSO MODIFIES INT.FORCE VECT. FI FOR SPRING EFFECTS
        CALL ELSTRUC(AKTE,AKTS,NV,AK14,ID14S,AK14S,NDSP,FI,PT,
     1              IMOD,IWRIT,IWR)
C
C     BELOW FORMS GM(OUT OF BALANCE FORCE VECTOR)
C     AND REACTION VECTOR
        DO 10 I=1,NV
          GM(I) = 0.D0
          REAC(I) = FI(I)
          IF (IBC(I).EQ.0) THEN
            GM(I) = QEX(I) - FI(I)
          ENDIF
   10   CONTINUE
C
C     OVERWRITE SPRING REACTION TERMS
        IF (NDSP.NE.0) THEN
          DO 50 I=1,NDSP
            REAC(ID14S(I)) = -AK14S(I)*PT(ID14S(I))
   50     CONTINUE
        ENDIF
C
C     BELOW CHECKS CONVERGENCE
        FNORM = 0.D0
        GNORM = 0.D0
        RNORM = 0.D0
        IDSP = 0
        DO 20 I = 1,NV
          IF (IBC(I).EQ.0) FNORM = FNORM + QEX(I)*QEX(I)
          IF (IBC(I).EQ.-1) IDSP = 1
          RNORM = RNORM + REAC(I)*REAC(I)
          GNORM = GRNOM + GM(I)*GM(I)
   20   CONTINUE
        FNORM = DSQRT(FNORM)
        GNORM = DSQRT(GNORM)
        RNORM = DSQRT(RNORM)
        BAS = MAX(FNORM,SMALL)
C     BELOW DISP. CONTROL
        IF (IDSP.EQ.1) BAS = MAX(RNORM,SMALL)
        BET = GNORM/BAS
        ITEM = ITE - 1
        WRITE(IWR,1001) ITEM,BET
 1001   FORMAT(/,1X,'ITERM.NO. = ',I5,'CONV.FAC. = ',G13.5,/)
        IF (IWRIT.EQ.1) WRITE (IWR,1003) (GM(I),I=1,NV)
 1003   FORMAT(/,1X,'OUT OF BALANCE FORCE VECTOR = ',1X,4G13.5,/)
        IF (BET.LE.BETOK) GO TO 200
C
        IF (ITERTY.EQ.1) THEN
          CALL BCON(AKTS,IBC,NV,GM,IWRIT,IWR)
C     ABOVE APPLIES BOUNDARY CONDITIONS
          CALL CROUT(AKTS,D,NV,IWRIT,IWR)
C     ABOVE FORMS LDL(TRAN) FACTORIZATION INTO AKTS AND D
        ENDIF
C
        CALL SOLVCR(AKTS,D,GM,NV,IWRIT,IWR)
C     ABOVE KETS ITER.DIP.CHANGE IN GM
C
        DO 30 I=1,NV
          IF (IBC(I).EQ.0) THEN
            PT(I) = PT(I) + GM(I)
          ELSE
            PT(I) = QEX(I)
          ENDIF
   30   CONTINUE
C     ABOVE UPDATES DISPLACEMENTS
        IF (IWRIT.EQ.1) WRITE(IWR,1004) (PT(I), I=1,NV)
 1004   FORMAT(/,1X,'TOTAL DISPS ARE',1X,6G13.5,/)
C
  100 CONTINUE
C
      WRITE(IWR,1002)
 1002 FORMAT(/,1X,'**FAILED TO CONVERGE**',/)
      STOP 'ITER 100'
C
  200 CONTINUE
      RETURN
      END