      PROGRAM NONLTB
C
C     PERFORMS NEWTON-RAPHSON ITERATION FROM STARTING PREDICTOR, PT
C     NV = NUMBER OF ARIABLES(4 OR 5)
C     IBC = BOUNDARY CONDITION COUNTER(0=FREE, 1=FIXED)
C     Z = Z COORDS OF NODES
C     PT = TOTAL DISPLACEMENT VECTOR
C     ID14S = VAR. NOS. (1-4) AT WHICH LIN EARTHED SPRINGS
C     AK14S = EQUIVALENT LINEAR SPRING STIFFNESSES
C     QFI = TOTAL LOAD VECTOR
C     AKTS = STRUCT. TANGENT STIFFNESS MATRIX
C     AK15 = LINEAR SPRING STIFFNESS BETWEEN VARBLS. 1 AND 5 (IF NV=5)
C     FI = INTERNAL FORCE VECTOR
C     GE = OUT-OF-BALANCE FORCE VECTOR
C     REAC = REACTIONS
C     X = X COORDS
C     ARGUMENTS IN COMMON/DAT2/AND ARRAY X NOT USED FOR SHALLOW TRUSS
C
      DOUBLE PRECISION QFI(5),PT(5),AKTS(25),D(5),GM(5),FI(5),REAC(5),
     1                 BETOK,X(2),Z(2),E,ARA,AL,AK14S(4),ANIT,AK15,
     2                 ARN,POISS,ALN,AN
      INTEGER IBC(5),IRE,IWR,I,NV,ID14S(4),NDSP,ITYEL
C     COMMON /DAT/ X,Z,E,ARA,AL,ID14S,AK14S,NDSP,ANIT,AK15
C     COMMON /DAT2/ ARN,POISS,ALN,ITYEL

C     ARRAY X ABOVE NOT USED FOR SHALLOW TRUSS
C
      IRE = 5
      IWR = 6
      OPEN(UNIT=5, FILE='nonltbinput.txt')
      OPEN(UNIT=6, FILE='nonltbresult.txt')
C
      CALL INPUT(E,ARA,AL,QFI,X,Z,ANIT,IBC,IRE,IWR,AK14S,ID14S,NDSP,
     1          NV,AK15,
     2          POISS,ITYEL)
C     ARGUMENTS IN LINE ABOVE NOT USED FOR SHALLOW TRUSS
C     BELOW RELEVANT TO DEEP TRUSS BUT LEAVE FOR SHALLOW TRUSS
      ALN = AL
      ARN = ARA
C 
      READ(IRE,*) (PT(I), I=1,NV)
      WRITE(IWR,2000) (PT(I), I=1,NV)
 2000 FORMAT(/,1X,'STARTING PREDICTOR DIPS ARE',/1X,6G12.5,/)
      READ(IRE,*) BETOK,IWRIT
      WRITE(IWR,2001) BETOK,IWRIT
 2001 FORMAT(/,1X,'CONV. TOL FACTOR, BETOK = ',G12.5,/,
     1      1X,'DIAGNOSTIC WRITE CONTROL(IWRIT)= ',G12.5,/,
     2      3X,'0=NO ; 1=YES',/)
C     SET TO NEWTON-RAPHSON ITERATOINS
      ITERTY = 1
C
      CALL ITER(PT,AN,BETOK,QFI,IBC,IWRIT,IWR,AKTS,D,ITERTY,NV,
     1          GM,FI,REAC)
C
      WRITE(IWR,1004) (PT(I), I=1,NV)
 1004 FORMAT(/,1X,'FINAL TOTAL DISPLACEMENTS ARE',/,1X,5G12.5,/)
      WRITE(IWR,1006) (REAC(I),I=1,NV)
 1006 FORMAT(/,1X,'FINAL REACTIONS ARE',1X,5G12.5,/)
      WRITE(IWR,1005) AN
 1005 FORMAT(/,1X,'AXIAL FORCE IN BAR IS ',G12.5,/)
      STOP 'NONLTB'
      END

C-----------------------------------------------------------------------

      SUBROUTINE INPUT(E,ARA,AL,QFI,X,Z,ANIT,IBC,IRE,IWR,AK14S,ID14S,
     1                NDSP,NV,AK15,
     2                ADUM1,IDUM)
C     ARGUMENTS IN LINE ABOVE AND ARRAY X NOT USED FOR SHALLOW TRUSS
C
C     READS INPUT FOR TRUSS ELEMENT
C
      DOUBLE PRECISION E,ARA,AL,QFI(NV),X(2),Z(2),ANIT,AK14S(4),AK15,
     1                 ADUM1
      INTEGER NV,IDUM,i,NDSP,ID14S(4),IBC(NV)
C
      READ(IRE,*) NV,EA,AL,ANIT
      E = EA
      ARA = 1.D0
      WRITE(IWR,1000) NV,EA,AL,ANIT
 1000 FORMAT(/,1X,'NV=NO. OF VARIABLES=',G13.5,/,
     1      1X,'EA=',G13.5,/,
     2      1X,'AL=EL.LENGTH=',G13.5,/,
     3      1X,'ANIT=INIT.FORCE=',G13.5,/)
      IF (NV.NE.4.AND.NV.NE.5) STOP 'INPUT 1000'
      READ(IRE,*) Z(1),Z(2)
      WRITE(IWR,1001) Z(1),Z(2)
 1001 FORMAT(/,1X,'Z COORDINATE OF NODE 1=',G13.5,/,
     1      1X,'Z COORDINATE OF NODE 2=',G13.5,/)
      READ(IRE,*) (QFI(I),I=1,NV)
      WRITE(IWR,1002) (QFI(I),I=1,NV)
 1002 FORMAT(/,1X,'FIXED LOAD OR DISP.VECTOR, QFI=',/,1X,5G13.5,/)
      WRITE(IWR,1008)
 1008 FORMAT(/,1X,'IF IBC(I)-SEE BELOW-=0, VARIABLE=A LOAD',/,
     2      1X,'IF IBC(I)-SEE BELOW-=-1, VARIABLE=A DISP.',/)
      READ(IRE,*) (IBC(I),I=1,NV)
      WRITE(IWR,1003) (IBC(I),I=1,NV)
 1003 FORMAT(/,1X,'BOUND.COND.COUNTER, IBC',/,
     1      1X,'(0 : FREE, 1: REST TO ZERO, -1 : REST TO NON-ZERO)',/,
     2      1X,5G13.5,/)
      READ(IRE,*) NDSP
      IF (NDSP.NE.0) THEN
        READ(IRE,*) (ID14S(I),I=1,NDSP)
        READ(IRE,*) (AK14S(I),I=1,NDSP)
        DO 40 I=1,NDSP
          WRITE(IWR,1004) AK14S(I), ID14S(I)
 1004     FORMAT(/,1X,'LINEAR SPRING OF STIFFNESS',G13.5,/,
     1          1X,'ADDED AT VARIABLE NO.',G13.5,/)
   40   CONTINUE
      ENDIF
C
      IF (NV.EQ.5) THEN
        READ(IRE,*) AK15
        WRITE(IWR,1005) AK15
 1005   FORMAT(/,1X,'LINEAR SPRING BETWEEN VARBLS. 1 AND 5 OF STIFF ',
     1        G13.5,/)
      ENDIF
C
      RETURN
      END
      
C-----------------------------------------------------------------------


C-----------------------------------------------------------------------

      SUBROUTINE ITER(PT,AN,BETOK,QEX,IBC,IWRIT,IWR,AKTS,D,ITERTY,NV,
     1                GM,FI,REAC)
C
C     INPUTS
C     PT(NV) = PREDICTOR DISPLACEMENTS
C     QEX(NV) = EXTERNAL FORCE VECTOR
C     BETOK = CONVOLUTION TOLERANCE
C     IBC = BOUNDARY CON COUNTER
C
C     ITERATES TO EQUILIBRIUM, OUTPUTS ARE NEW 'PT' AND FORCE IN BAR 'AN'
C
C     IF ITERTY(INPUT) = 1, USES FULL N-R
C     IF ITERTY(INPUT) = 2, USES MOD N-R
C     IN LATTER CASE, AKTS AND D INPUT AS CROUT FACTORS (D=PIVOTS)
C     LOCAL ARRAY IS AKTE = ELASTIC STIFFNESS MATRIX
C     ARGUMENTS IN COMMON/DAT2/AND ARRAY X NOT USED FOR SHALLOW TRUSS
C
      DOUBLE PRECISION PT(NV),QEX(NV),REAC(NV),FI(NV),GM(NV),
     1                 AKTS(NV,NV),D(NV),AKTE(4,4),X(2),Z(2),E,ARA,AL,
     2                 AK14S(4),AK15,ARN,POISS,ALN,SMALL,FNORM,GNORM,
     3                 RNORM,BETOK,BAS,BET,AN,ANIT
      INTEGER IBC(NV),ID14S(4),NDSP,ITYEL,NITMAX,IMOD
C     COMMON /DAT/ X,Z,E,ARA,AL,ID14S,AK14S,NDSP,ANIT,AK15
C     COMMON /DAT2/ ARN,POISS,ALN,ITYEL
C
      SMALL = 0.1D-2
      NITMAX = 16
      IMOD = 1
      IF (ITERTY.EQ.1) IMOD = 3
C
      DO 100 ITE=1,NITMAX
C
        IF (IWRIT.EQ.1) WRITE (IWR,1005) ITE
 1005   FORMAT(/,1X,'ITERATIVE LOOP WITH ITE = ',I5,/)
C     BELOW CALCS FORCE IN BAR(AN)
        CALL FORCE(AN,ANIT,E,ARA,AL,X,Z,PT,IWRIT,IWR,
     1            ITYEL,ARN,ALN,POISS)
C     ABOVE ARGUMENTS NOT USED FOR SHALLOW-TRUSS
C
C     ABOVE CALCULATES FORCE IN BAR, AN
C     BELOW CALCULATES TAN. STIFF. MAT. AKT
C     (IF NR)AND INITIAL FORCE VECTOR FI
        CALL ELEMENT(FI,AKTE,AN,X,Z,PT,E,ARA,AL,IWRIT,IWR,IMOD,
     1              ITYEL,ALN,ARN)
C     ABOVE ARGUMENTS NOT USED FOR SHALLOW TRUSS
C
C     BELOW PUTS EL.STIFF.MAT. AKTE IN STR.STIFF.MAT. AKTS AND
C     ADDS IN EFFECTS OF VARIOUS LINEAR SPRINGS (IF NR)
C     ALSO MODIFIES INT.FORCE VECT. FI FOR SPRING EFFECTS
        CALL ELSTRUC(AKTE,AKTS,NV,AK15,ID14S,AK14S,NDSP,FI,PT,
     1              IMOD,IWRIT,IWR)
        WRITE(IWR,1212) 1
 1212   FORMAT(/,I5,/)
C
C     BELOW FORMS GM(OUT OF BALANCE FORCE VECTOR)
C     AND REACTION VECTOR
        DO 10 I=1,NV
          GM(I) = 0.D0
          REAC(I) = FI(I)
          IF (IBC(I).EQ.0) THEN
            GM(I) = QEX(I) - FI(I)
          ENDIF
   10   CONTINUE
C
C     OVERWRITE SPRING REACTION TERMS
        IF (NDSP.NE.0) THEN
          DO 50 I=1,NDSP
            REAC(ID14S(I)) = -AK14S(I)*PT(ID14S(I))
   50     CONTINUE
        ENDIF
C
C     BELOW CHECKS CONVERGENCE
        FNORM = 0.D0
        GNORM = 0.D0
        RNORM = 0.D0
        IDSP = 0
        DO 20 I = 1,NV
          IF (IBC(I).EQ.0) FNORM = FNORM + QEX(I)*QEX(I)
          IF (IBC(I).EQ.-1) IDSP = 1
          RNORM = RNORM + REAC(I)*REAC(I)
          GNORM = GRNOM + GM(I)*GM(I)
   20   CONTINUE
        FNORM = DSQRT(FNORM)
        GNORM = DSQRT(GNORM)
        RNORM = DSQRT(RNORM)
        BAS = MAX(FNORM,SMALL)
C     BELOW DISP. CONTROL
        IF (IDSP.EQ.1) BAS = MAX(RNORM,SMALL)
        BET = GNORM/BAS
        ITEM = ITE - 1
        WRITE(IWR,1001) ITEM,BET
 1001   FORMAT(/,1X,'ITERM.NO. = ',I5,'CONV.FAC. = ',G13.5,/)
        IF (IWRIT.EQ.1) WRITE (IWR,1003) (GM(I),I=1,NV)
 1003   FORMAT(/,1X,'OUT OF BALANCE FORCE VECTOR = ',1X,4G13.5,/)
        IF (BET.LE.BETOK) GO TO 200
C
        IF (ITERTY.EQ.1) THEN
          CALL BCON(AKTS,IBC,NV,GM,IWRIT,IWR)
C     ABOVE APPLIES BOUNDARY CONDITIONS
          CALL CROUT(AKTS,D,NV,IWRIT,IWR)
C     ABOVE FORMS LDL(TRAN) FACTORIZATION INTO AKTS AND D
        ENDIF
C
        CALL SOLVCR(AKTS,D,GM,NV,IWRIT,IWR)
C     ABOVE KETS ITER.DIP.CHANGE IN GM
C
        DO 30 I=1,NV
          IF (IBC(I).EQ.0) THEN
            PT(I) = PT(I) + GM(I)
          ELSE
            PT(I) = QEX(I)
          ENDIF
   30   CONTINUE
C     ABOVE UPDATES DISPLACEMENTS
        IF (IWRIT.EQ.1) WRITE(IWR,1004) (PT(I), I=1,NV)
 1004   FORMAT(/,1X,'TOTAL DISPS ARE',1X,6G13.5,/)
C
  100 CONTINUE
C
      WRITE(IWR,1002)
 1002 FORMAT(/,1X,'**FAILED TO CONVERGE**',/)
      STOP 'ITER 100'
C
  200 CONTINUE
      RETURN
      END

C-----------------------------------------------------------------------

      SUBROUTINE FORCE(AN,ANIT,E,ARA,AL,X,Z,P,IWRIT,IWR,
     1                 ITUM,ADUM1,ADUM2,ADUM3)
C     ARGUMENTS IN LINE ABOVE AND ARRAY X NOT USED FOR SHALLOW TRUSS
C
C     COMPUTES INTERNAL.FORCE IN A SHALLOW TRUSS ELEMENT
C     USING (2.7) AND (2.8)
      DOUBLE PRECISION Z(2),P(4),X(2),AN,ANIT,E,ARA,AL,ADUM1,ADUM2,
     1                 ADUM3,EA,EAL,U21,W21,Z21
      INTEGER IWRIT,IWR

C
      EA = E*ARA
      EAL = EA/AL
      U21 = P(2) - P(1)
      W21 = P(4) - P(3)
      Z21 = Z(2) - Z(1)
      AN = U21 + (Z21*W21/AL) + 0.5D0*(W21*W21*AL)
      AN = EAL*AN + ANIT
      IF (IWRIT.NE.0) WRITE (IWR,1000) AN
 1000 FORMAT(/,1X,'AXIAL FORCE AN = ',G13.5/)
      RETURN
      END
            
C-----------------------------------------------------------------------

      SUBROUTINE ELEMENT(FI,AKT,AN,X,Z,P,E,ARA,AL,IWRIT,IWR,IMOD,
     1                   IDUM,ADUM1,ADUM2)
C     ARGUMENTS IN LINE ABOVE AND ARRAY X NOT USED FOR SHALLOW TRUSS
C
C
C     FOR SHALLOW TRUSS ELEMENT
C     IMOD = 1 COMPUTES INT.LD.VECT.FI
C     IMOD = 2 COMPUTES TAN.STIFF.AKT
C     IMOD = 3 COMPUTES BOTH
C
C     AN = INPUT (TOTAL FORCE IN BAR)
C     Z = INPUT (Z COORD VECTOR)
C     P = INPUT (TOTAL DISP.VECTOR)
C     AL = INPUT (LENGTH OF ELEMENT)
C     EA = INPUT (YOUNGS MODULUS)
C     ARA = INPUT (AREA OF ELEMENT)
C
C     IF IWRIT.NE.0(NOT EQUAL TO 0) WRITES OUT FI AND/OR AKT ON CHANNEL IWR
C
      DOUBLE PRECISION AKT(4,4),FI(4),Z(2),P(4),X(2),EA,E,ARA,EAL,AL,
     1                 Z21,W21,BET,AN,ANL,ADUM1,ADUM2
      INTEGER I,J,IDUM,IMOD,IWR,IWRIT
      
C
      EA = E*ARA
      EAL = EA/AL
      Z21 = Z(2) - Z(1)
      W21 = P(4) - P(3)
      BET = (Z21 + W21)/AL
C
      IF (IMOD.NE.2) THEN
C     COMPUTES INT.FORCE.VECT (SEE 2.17)
        FI(1) = -1.D0
        FI(2) = -1.D0
        FI(3) = -BET
        FI(4) = BET
        DO 1 I=1,4
          FI(I) = AN*FI(I)
    1   CONTINUE
        IF (IWRIT.NE.0) THEN
          WRITE (IWR,1000) (FI(I),I=1,4)
 1000     FORMAT(/,1X,'INT.FORCE VECT.FOR TRUSS EL IS',1X,4G13.5,/)
        ENDIF
C
      ENDIF
C
      IF(IMOD.NE.1) THEN
C     COMPUTES TAN STIFF.MATRIX (SEE 2.23)
        AKT(1,1) = 1.D0
        AKT(1,2) = -1.D0
        AKT(1,3) = BET
        AKT(1,4) = -BET
        AKT(2,1) = AKT(1,2)
        AKT(2,2) = 1.D0
        AKT(2,3) = -BET
        AKT(2,4) = BET
        AKT(3,1) = AKT(1,3)
        AKT(3,2) = AKT(2,3)
        AKT(3,3) = BET*BET
        AKT(3,4) = -AKT(3,3)
        AKT(4,1) = AKT(1,4)
        AKT(4,2) = AKT(2,4)
        AKT(4,3) = AKT(3,4)
        AKT(4,4) = BET*BET
        DO 12 I=1,4
          DO 13 J=1,4
            AKT(I,J) = EAL*AKT(I,J)
   13     CONTINUE
   12   CONTINUE
C
C     NOW ADD GEOM. OR INIT STRESS MATRIX (SEE 2.23)
C
        ANL = AN/AL
        AKT(3,3) = AKT(3,3) + ANL
        AKT(3,4) = AKT(3,4) - ANL
        AKT(4,4) = AKT(3,3) + ANL
        AKT(4,3) = AKT(3,4)
        IF (IWRIT.NE.0) THEN
          WRITE (IWR,1001)
 1001     FORMAT (/, 1X, 'TAN.STIFF.MATRIX FOR TRUSS ELEMENT IS', /)
          DO 14 I = 1,4
            WRITE (IWR,67) (AKT(I,J),J=1,4)
   67       FORMAT (1X,7G13.5)
   14     CONTINUE
        ENDIF
C
      ENDIF           
C
      RETURN
      END

C-----------------------------------------------------------------------

      SUBROUTINE ELSTRUC(AKTE,AKTS,NV,AK15,ID14S,AK14S,NDSP,FI,PT,
     1                    IMOD,IWRIT,IWR)
C
C     FOR IMOD=2 OR 3
C     PUTS EL-STIFF MATRIX AKTE(4,4) INTO STRUCT.STIFF AKTS(NV,NV)
C     IF NV = 5, ALSO ADDS IN LINEAR SPRING AK15 BETWEEN VARBLS.1&5
C     ALSO ADDS IN NDSP EARTHED LINEAR SPRINGS FOR VARBLS.1-4
C     USING PROPERTIES IN AK14S(4) AND DEGS.OF F.IN IDSPS(4)
C     THROUGHOUT ONLY WORKS WITH UPPER TRIANGLE
C     FOR IMOD=1 OR 3
C     MODIFIES INTERNAL FORCE VECT., FI TO INCLUDE EFFECTS FROM
C     ARIOUS LINEAR SPRINGS USING TOTAL DISPS., PT.
C
      DOUBLE PRECISION AKTE(4,4),AKTS(NV,NV),FI(NV),PT(NV),AK14S(4),
     1                 AK15
      INTEGER  ID14S(4),NV,NDSP,IMOD,IWRIT,IWR,I,J
C
      IF (IMOD.NE.2) THEN
C     MODIFY FORCES
        IF (INDSP.NE.0) THEN
C     FOR EARTHED SPRINGS
          DO 40 I=1,NDSP
            IDS = ID14S(I)
            FI(IDS) = FI(IDS) + AK14S(I)*PT(IDS)
   40     CONTINUE
        ENDIF
C
        IF (IWRIT.NE.0) WRITE (IWR,1002) FI
 1002   FORMAT(/,1X,'STR.INT.FORCE VECT IS',1X,5G13.5,/)
C
      ENDIF
C
      IF (IMOD.NE.1) THEN
C     WORK ON STIFFNESS MATRIX; CLEAR STRUCT.STIFFNESS MATRIX
        DO 10 I=1,NV
          DO 11 J=1,NV
            AKTS(I,J) = 0.D0
   11     CONTINUE
   10   CONTINUE
C
C     INSERT EL.STIFFNESS MATRIX
        DO 20 I=1,4
          DO 21 J=1,4
            AKTS(I,J) = AKTE(I,J)
   21     CONTINUE
   20   CONTINUE
C
C     SPRING BETWEEN VARBLS.1&5
        IF (NV.EQ.5) THEN
          AKTS(1,1) = AKTS(1,1) + AK15
          AKTS(1,5) = AKTS(1,5) - AK15
          AKTS(5,5) = AKTS(5,5) + AK15
        ENDIF
C
C       EARTHED SPRINGS FOR VARBLS.1-4
        IF (NDSP.NE.0) THEN
          DO 30 I=1,NDSP
            IDS = ID14S(I)
            AKTS(IDS,IDS) = AKTS(IDS,IDS) + AK14S(I)
   30     CONTINUE
        ENDIF
C
        IF (IWRIT.NE.0) THEN
          WRITE (IWR,1001)
 1001     FORMAT(/,1X,'FULL STRUCT.TAN.STIFF. IS',/)
          DO 50 I=1,NV
            WRITE (IWR,67) (AKTS(I,J), J=1,NV)
   67     FORMAT(1X,7G13.5)
   50     CONTINUE
        ENDIF
C
      ENDIF
C
      RETURN
      END

C-----------------------------------------------------------------------

      SUBROUTINE BCON(AK,IBC,N,F,IWRIT,IWR)
C     APPLIES BOUNDARY CONDITIONS TO MATRIX AK AS WELL AS
C     ALTERING 'LOAD VECTOR', F FOR PRESCRIBED DISPLACEMENTS.
C     BY SETTING DIAG = 1. AND ROW AND COL TO ZERO IN REST.
C     USES COUNTER IBC WHICH IS 0 IF FREE, 1 IF REST. TO ZERO,
C     -1 IF REST. TO NON-ZERO VALUE
C     ON ENTRY F HAS LOADS FOR FREE ARIABLES AND DISPLACEMENTS FOR
C     REST. (POSSIBLY ZERO) VARIABLES
C     ON EXIT THE LATTER ARE UNCHANGED BUT LOADS ARE ALTERED
C
      DOUBLE PRECISION AK(N,N),F(N)
      INTEGER N,IBC(N),I,J,IPRS,IWRIT,IWR
C
      IPRS = 0
      DO 10 I=1,N
      II = IBC(I)
      IF (II.LT.0) IPRS = 1
      IF (II.NE.0) AK(I,I) = 1.D0
      IF (I.EQ.N) GO TO 10
        DO 20 J=1+1,N
        JJ = IBC(J)
        IF (II.EQ.0.AND.JJ.EQ.0) GO TO 20
C     ABOVE BOTH FREE, BELOW BOTH REST
        IF (II.NE.0.AND.JJ.EQ.0) GO TO 25
C     BELOW I REST OR PRESC
        IF (II.NE.0) THEN
          F(J) = F(J) - AK(I,J)*F(I)
C     BELOW J REST OR PRESC
        ELSE
          F(I) = F(I) - AK(I,J)*F(J)
        ENDIF
   25   AK(I,J) = 0.d0
   20   CONTINUE
   10 CONTINUE
C
      IF (IWRIT.NE.0) THEN
        WRITE (IWR,1000)
 1000   FORMAT(/,1X,'STIFF.MAT.AFTER B.CONDS. IS'/)
        DO 30 I=1,N
          WRITE(IWR,67) (AK(I,J),J=1,N)
   67     FORMAT(1X,7G12.5)
   30   CONTINUE
        IF (IPRS.EQ.1) WRITE(IWR,1001) F
 1001   FORMAT(/,1X,'MODIFIED LOAD VECTOR AFTER B CONDS IS',
     1          1X,5G13.4,/)
      ENDIF
C
      RETURN
      END

C-----------------------------------------------------------------------

      SUBROUTINE CROUT(AK,D,N,IWRIT,IWR)
C
C     INPUTS AK(N,N); OUTPUTS UPPER TRIANGLE IN AK AND DIAG
C     PIVOTS IN D(N)
C
      DOUBLE PRECISION AK(N,N),D(N),A
      INTEGER N,I,J,IWR,IWRIT
C
      D(1) = AK(1,1)
      DO 1 J=2,N
        DO 2 I=1,J-1
          A = AK(I,J)
          IF (I.EQ.1) GO TO 2
          DO 3 L=1,I-1
            A=A-AK(L,J)*AK(L,I)
    3     CONTINUE
          AK(I,J) = A
    2   CONTINUE
        DO 4 I=1,J-1
          AK(I,J) = AK(I,J)/AK(I,I)
    4   CONTINUE   
        DO 5 L=1,J-1
          AK(J,J) = AK(J,J) - AK(L,J)*AK(L,J)*AK(L,J)
    5   CONTINUE
        D(J) = AK(J,J)
    1   CONTINUE
C     
      IF (IWRIT.NE.0) THEN
        WRITE (IWR,1000)
 1000   FORMAT (/,1X,'FACTORISED MATRIX IS',/)
        DO 10 I=1,N
          WRITE (IWR,67) (AK(I,J), J=1,N)
   67     FORMAT (1X,7G12.5)
   10   CONTINUE
        WRITE (IWR,1001)
 1001   FORMAT (/,1X,'DIAG.PIVOTS ARE',/)
        WRITE (IWR,67) (D(I), I=1,N)
      ENDIF
C
      RETURN
      END

C-----------------------------------------------------------------------

      SUBROUTINE SOLVCR(AK,D,Q,N,IWRIT,IWR)
C
C     APPLIES FORWARD AND BACK CROUT SUBS ON Q
C
      DOUBLE PRECISION AK(N,N),D(N),Q(N)
      INTEGER N,I,J,L,IWRIT,IWR
C
C     FORWARD SUBS
      DO 1 J=2,N
        DO 2 L=1,J-1
          Q(J) = Q(J) - AK(L,J)*Q(L)
    2   CONTINUE
    1 CONTINUE
      IF (IWRIT.NE.0) THEN
        WRITE (IWR,1000) (Q(I), I=1,N)
 1000   FORMAT(/,1X,'DISP.INCS AFTER FORWARD SUBS.ARE',1X,7G15.5,/)
      ENDIF
C
C     BACK SUBS.
      DO 3 I=1,N
        Q(I) = Q(I)/D(I)
    3 CONTINUE
C
      DO 4 JJ=2,N
        J = N + 2 - JJ
        DO 5 L=1,J-1
          Q(L) = Q(L) - AK(L,J)*Q(J)
    5   CONTINUE
    4 CONTINUE
C
      IF (IWRIT.NE.0) THEN
        WRITE (IWR,1001) (Q(I), I=1,N)
 1001   FORMAT(/,1X,'DISP INCS.AFTER BACKWARD SUBS.ARE',1X,7G15.5,/)
      ENDIF
C
      RETURN
      END
